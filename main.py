import discord
from discord.ext import commands, tasks
import random
import os
from dotenv import load_dotenv
import json
import sys
import asyncio
from discord.ui import Button, View
from datetime import datetime
import logging
from datetime import datetime
from datetime import datetime, timedelta

##############################################
####DEV BY THEDELF, ATLANTIC DIGITAL CLOUD####
##############################################

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
DAILY_BONUS = {
    "min": 550,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    "max": 1550,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    "streak_bonus": {  # –ë–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏—é –¥–Ω–µ–π
        3: 3000,
        7: 7000,
        30: 30000
    }
}

BUSINESS_TYPES = {
    1: {"name": "–ö–æ—Ñ–µ–π–Ω—è", "income": [10000, 11500], "upgrade_cost": 15000, "emoji": "‚òï", "capacity": 15000},
    2: {"name": "–ö–∞—Ä—à–µ—Ä–∏–Ω–≥", "income": [50000, 200000], "upgrade_cost": 500000, "emoji": "üçΩÔ∏è", "capacity": 500000},
    3: {"name": "–ù–∞—Ä–∫–æ–±–∞—Ä–æ–Ω", "income": [200000, 350000], "upgrade_cost": 2500000, "emoji": "üè≠", "capacity": 2500000}
}

@tasks.loop(minutes=60)
async def business_income():
    for user_id, biz in user_businesses.items():
        biz_type = BUSINESS_TYPES[biz["type"]]

        # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç
        income = random.randint(biz_type["income"][0], biz_type["income"][1])
        biz["balance"] = min(biz.get("balance", 0) + income, biz_type["capacity"])

    save_businesses()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
LOG_FILE = "bot.log"
ERROR_FILE = "errors.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler(LOG_FILE),
              logging.StreamHandler()])

error_logger = logging.getLogger('error_logger')
error_logger.addHandler(logging.FileHandler(ERROR_FILE))

#–¥–ª—è –ª—Å
intents = discord.Intents.default()
intents.messages = True  # –î–ª—è –∫–Ω–æ–ø–æ–∫
intents.message_content = True  # –î–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
PREFIX = '!'  # –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥

# –í–∞–ª—é—Ç–∞ –∫–∞–∑–∏–Ω–æ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
CURRENCY = "üí∞"

# –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
STARTING_BALANCE = 1000

# –ë–∞–ª–∞–Ω—Å—ã –∏–≥—Ä–æ–∫–æ–≤ (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏, –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ë–î)
user_balances = {}

#–¥–ª—è –±–¥
BALANCES_FILE = "user_balances.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω–µ–π
LEVELS_FILE = "user_levels.json"
XP_PER_MESSAGE = 1
XP_PER_MINUTE_VOICE = 2
LEVEL_UP_XP = 100  # –û–ø—ã—Ç –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
STATUS_ROTATION = [
    discord.Activity(type=discord.ActivityType.playing, name="–≤ –∫–∞–∑–∏–Ω–æ"),
    discord.Activity(type=discord.ActivityType.listening, name="—Å—Ç–∞–≤–∫–∏"),
    discord.Activity(type=discord.ActivityType.playing, name="—Å –∫–æ–¥–æ–º"),
    discord.Activity(type=discord.ActivityType.listening, name="–≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã"),
    discord.Activity(type=discord.ActivityType.watching, name="–∑–∞ —Å–µ—Ä–≤–µ—Ä–æ–º"),
    discord.Game(name=f"{PREFIX}–ø–æ–º–æ—â—å"),
    discord.Streaming(name="–†–∞–∑—Ä–∞–±–æ—Ç–∫—É", url="https://twitch.tv/discord")
]

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
RESPONSES = [
    "–ë–µ—Å—Å–ø–æ—Ä–Ω–æ!", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ.", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π.", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞!",
    "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º.", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª.", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ.",
    "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª.",
    "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ.", "–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å.",
    "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å.",
    "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π!", "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª.", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª.",
    "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.", "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.", "–ë–ª—è —Ö—É–π –∑–Ω–∞–µ—Ç.",
    "–ò–¥–∏ –Ω–∞—Ö—É–π."
]

#–î–ª—è –±–æ–Ω—É—Å–∞
def save_data(data, filename):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def load_levels():
    try:
        if os.path.exists(LEVELS_FILE):
            with open(LEVELS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω–µ–π: {e}")
    return {}


def save_levels():
    try:
        with open(LEVELS_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_levels, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —É—Ä–æ–≤–Ω–µ–π
user_levels = load_levels()

#–ë–î –î–õ–Ø –ì–ï–ï–í
MARRIAGE_FILE = "marriages.json"

# –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–¥ –±–∏–∑–Ω–µ—Å–æ–≤
def load_businesses():
    try:
        with open('businesses.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_businesses():
    with open('businesses.json', 'w') as f:
        json.dump(user_businesses, f, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_businesses = load_businesses()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(ctx):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if ctx.author.guild_permissions.administrator:
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with open('config.json', 'r') as f:
        config = json.load(f)
        return str(ctx.author.id) in config.get('admin_ids', [])

def load_marriages():
    try:
        with open(MARRIAGE_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_marriages():
    with open(MARRIAGE_FILE, 'w') as f:
        json.dump(marriages, f, indent=4)


marriages = load_marriages()


#–±–¥
def load_balances():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(BALANCES_FILE):
            with open(BALANCES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")
    return {}


def save_balances():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤ —Ñ–∞–π–ª"""
    try:
        with open(BALANCES_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_balances, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


user_levels = load_levels()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
user_balances = load_balances(
)  # ‚Üê –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ó–ê–ú–ï–ù–Ø–ï–¢ –≤–∞—à —Å—Ç–∞—Ä—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å `user_balances = {}`

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix=PREFIX,
                   intents=intents,
                   activity=discord.Game(name="–ó–∞–≥—Ä—É–∑–∫–∞..."),
                   status=discord.Status.online)

# –£–¥–∞–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É help
bot.remove_command('help')


# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!')
    print(f'ID: {bot.user.id}')
    print(f'–°–µ—Ä–≤–µ—Ä–æ–≤: {len(bot.guilds)}')
    print('------')
    status_task.start()


#–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = str(message.author.id)

    if user_id not in user_levels:
        user_levels[user_id] = {"xp": 0, "level": 1, "voice_minutes": 0}

    old_level = user_levels[user_id]["level"]
    user_levels[user_id]["xp"] += XP_PER_MESSAGE

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    if user_levels[user_id]["xp"] >= (user_levels[user_id]["level"] *
                                      LEVEL_UP_XP):
        user_levels[user_id]["level"] += 1
        try:
            embed = discord.Embed(
                title=f"üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!",
                description=
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {user_levels[user_id]['level']}!",
                color=discord.Color.green())
            embed.add_field(name="–°–µ—Ä–≤–µ—Ä",
                            value=message.guild.name,
                            inline=False)
            embed.add_field(
                name="–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç",
                value=
                f"{user_levels[user_id]['xp']}/{user_levels[user_id]['level'] * LEVEL_UP_XP}",
                inline=True)
            await message.author.send(embed=embed)
        except discord.Forbidden:
            pass  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –õ–°

        await message.channel.send(
            f"üéâ {message.author.mention} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è {user_levels[user_id]['level']}!",
            delete_after=10)

    save_levels()
    await bot.process_commands(message)


# –¢—Ä–µ–∫–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@bot.event
async def on_voice_state_update(member, before, after):
    if member.bot:
        return

    user_id = str(member.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if user_id not in user_levels:
        user_levels[user_id] = {"xp": 0, "level": 1, "voice_minutes": 0}

    # –ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if before.channel is None and after.channel is not None:
        user_levels[user_id]["voice_start"] = datetime.now().timestamp()

    # –ö–æ–Ω–µ—Ü —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    elif before.channel is not None and after.channel is None:
        if "voice_start" in user_levels[user_id]:
            minutes = int((datetime.now().timestamp() -
                           user_levels[user_id]["voice_start"]) / 60)
            user_levels[user_id]["voice_minutes"] += minutes
            user_levels[user_id]["xp"] += minutes * XP_PER_MINUTE_VOICE
            del user_levels[user_id]["voice_start"]
            save_levels()


# –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
@tasks.loop(minutes=5)
async def status_task():
    await bot.change_presence(activity=random.choice(STATUS_ROTATION))


# –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.command(name='–ø–æ–º–æ—â—å', help='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥')
async def custom_help(ctx):
    embed = discord.Embed(title="üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                          description=f"–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥: `{PREFIX}`",
                          color=discord.Color.blurple())

    commands_list = [
        ("–ø–æ–º–æ—â—å", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("–≤–æ–ø—Ä–æ—Å <–≤–æ–ø—Ä–æ—Å>", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É"),
        ("–∏–Ω—Ñ–æ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        ("–±–∞–ª–∞–Ω—Å", "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å"),
        ("–∫–æ—Å—Ç–∏ <—Å—Ç–∞–≤–∫–∞>", "–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞"),
        ("–∫–∞–∑–∏–Ω–æ <—Å—Ç–∞–≤–∫–∞> <—Ü–≤–µ—Ç/—á–∏—Å–ª–æ>",
         "–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É (–∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ/—á–∏—Å–ª–æ)"),
        ("–ø–µ—Ä–µ–≤–æ–¥ @–∏–≥—Ä–æ–∫ —Å—É–º–º–∞", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"),
        ("–∂–µ–Ω–∏—Ç—å—Å—è @User", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞–∫–∞"),
        ("—Å–µ–º–µ–π–Ω—ã–π–±—é–¥–∂–µ—Ç –ø–æ–ª–æ–∂–∏—Ç—å —Å—É–º–º–∞", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç"),
        ("–±—Ä–∞–∫ @User", "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—Ä–∞–∫ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
        ("—É—Ä–æ–≤–µ–Ω—å [@–∏–≥—Ä–æ–∫]", "–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å"),
        ("–±–æ–Ω—É—Å", "–í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"),
        ("–¥–∞–Ω–µ—Ç", "–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–æ–º –¥–∞ –∏–ª–∏ –Ω–µ—Ç"),
        ("—Ä–∞–±–æ—Ç—ã", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞"),
        ("–±–∏–∑–Ω–µ—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ"),
        ("–∫—É–ø–∏—Ç—å–±–∏–∑–Ω–µ—Å", "–ö—É–ø–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å (15000üí∞)"),
        ("—É–ª—É—á—à–∏—Ç—å–±–∏–∑–Ω–µ—Å", "–£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"),
        ("–∑–∞–±—Ä–∞—Ç—å–¥–µ–Ω—å–≥–∏ [—Å—É–º–º–∞|all]", "–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∏–∑–Ω–µ—Å–∞"),
        ("–Ω–∞–∑–≤–∞—Ç—å–±–∏–∑–Ω–µ—Å [–∏–º—è]", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å"),
        ("—Å–µ–∫—Å @User", "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–Ω—è—Ç—Å—è –ª—é–±–æ–≤—å—é —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"),
        ("—Å—Ç–∞—Ç—É—Å <—Ç–µ–∫—Å—Ç>", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (ADMIN)"),
        ("—Å–µ—Ç–±–∞–ª–∞–Ω—Å @–∏–≥—Ä–æ–∫ —Å—É–º–º–∞", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ (ADMIN)"),
        ("—Å–µ—Ç—É—Ä–æ–≤–µ–Ω—å @–∏–≥—Ä–æ–∫ —É—Ä–æ–≤–µ–Ω—å", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å (ADMIN)"),
        ("–≤—ã–¥–∞—Ç—å–æ–ø—ã—Ç @–∏–≥—Ä–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–í—ã–¥–∞—Ç—å –æ–ø—ã—Ç (ADMIN)"),
        ("—Ä–µ—Å—Ç–∞—Ä—Ç", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞ (ADMIN)"),
    ]

    for cmd, desc in commands_list:
        embed.add_field(name=f"`{PREFIX}{cmd}`", value=desc, inline=False)

    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ –ò–Ω—Ñ–æ
@bot.command(name='–∏–Ω—Ñ–æ')
async def bot_info(ctx):
    embed = discord.Embed(title="ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                          color=discord.Color.gold())
    embed.add_field(name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="TheDelf", inline=True)
    embed.add_field(name="–í–µ—Ä—Å–∏—è", value="1.1", inline=True)
    embed.add_field(name="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
                    value=f"discord.py {discord.__version__}",
                    inline=True)
    embed.add_field(name="–°–µ—Ä–≤–µ—Ä–æ–≤", value=len(bot.guilds), inline=True)
    embed.add_field(name="–ü–∏–Ω–≥",
                    value=f"{round(bot.latency * 1000)}–º—Å",
                    inline=True)
    embed.set_footer(text=f"ID: {bot.user.id}")

    await ctx.send(embed=embed)


@bot.command(name='–≤–æ–ø—Ä–æ—Å')
async def ask_question(ctx, *, question):
    if not question.endswith('?'):
        await ctx.send("–î–æ–±–∞–≤—å—Ç–µ '?' –≤ –∫–æ–Ω—Ü–µ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    response = random.choice(RESPONSES)
    embed = discord.Embed(
        title="ü§î –Ø –¥—É–º–∞—é",
        description=f"**–í–æ–ø—Ä–æ—Å:** {question}\n**–û—Ç–≤–µ—Ç:** {response}",
        color=discord.Color.dark_purple())
    await ctx.send(embed=embed)


@bot.command(name='—Å—Ç–∞—Ç—É—Å')
@commands.has_permissions(administrator=True)
async def set_custom_status(ctx, *, text):
    await bot.change_presence(activity=discord.Game(name=text))
    embed = discord.Embed(description=f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{text}`",
                          color=discord.Color.green())
    await ctx.send(embed=embed)


# –ö–æ–º–∞–Ω–¥–∞ –∫–∞–∑–∏–Ω–æ
@bot.command(name='–∫–∞–∑–∏–Ω–æ', aliases=['casino', '—Ä—É–ª–µ—Ç–∫–∞'])
async def casino(ctx, bet: int, *, choice: str):
    user_id = str(ctx.author.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–≤–∫–∏
    if bet <= 0:
        await ctx.send("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    if user_balances[user_id] < bet:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}{CURRENCY}")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (0-36)
    result = random.randint(0, 36)
    is_red = result in [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]
    sector = "üîµ –ù–æ–ª—å" if result == 0 else "üî¥ –ö—Ä–∞—Å–Ω–æ–µ" if is_red else "‚ö´ –ß–µ—Ä–Ω–æ–µ"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä (1-12, 13-24, 25-36)
    sector_num = (result - 1) // 12 + 1 if result != 0 else 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    win = 0
    response = ""

    # –°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
    if choice.isdigit():
        if int(choice) == result:
            win = bet * 35
            response = f"üéâ –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –í—ã–∏–≥—Ä—ã—à: {win}{CURRENCY}"
        else:
            response = f"‚ùå –ù–µ —É–≥–∞–¥–∞–ª–∏. –í—ã–ø–∞–ª–æ: {result} ({sector})"

    # –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ü–≤–µ—Ç
    elif choice.lower() in ["–∫—Ä–∞—Å–Ω–æ–µ", "–∫—Ä–∞—Å–Ω—ã–π", "red"]:
        if is_red and result != 0:
            win = bet * 2
            response = f"üéâ –ö—Ä–∞—Å–Ω–æ–µ! –í—ã–∏–≥—Ä—ã—à: {win}{CURRENCY}"
        else:
            response = f"‚ùå –ù–µ –∫—Ä–∞—Å–Ω–æ–µ. –í—ã–ø–∞–ª–æ: {result} ({sector})"

    elif choice.lower() in ["—á–µ—Ä–Ω–æ–µ", "—á–µ—Ä–Ω—ã–π", "black"]:
        if not is_red and result != 0:
            win = bet * 2
            response = f"üéâ –ß–µ—Ä–Ω–æ–µ! –í—ã–∏–≥—Ä—ã—à: {win}{CURRENCY}"
        else:
            response = f"‚ùå –ù–µ —á–µ—Ä–Ω–æ–µ. –í—ã–ø–∞–ª–æ: {result} ({sector})"

    # –°—Ç–∞–≤–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä (1-–π, 2-–π, 3-–π)
    elif choice.lower() in ["1 —Å–µ–∫—Ç–æ—Ä", "–ø–µ—Ä–≤—ã–π —Å–µ–∫—Ç–æ—Ä", "sector1"]:
        if 1 <= result <= 12:
            win = bet * 3
            response = f"üéâ 1-–π —Å–µ–∫—Ç–æ—Ä (1-12)! –í—ã–∏–≥—Ä—ã—à: {win}{CURRENCY}"
        else:
            response = f"‚ùå –ù–µ 1-–π —Å–µ–∫—Ç–æ—Ä. –í—ã–ø–∞–ª–æ: {result} ({sector})"

    elif choice.lower() in ["2 —Å–µ–∫—Ç–æ—Ä", "–≤—Ç–æ—Ä–æ–π —Å–µ–∫—Ç–æ—Ä", "sector2"]:
        if 13 <= result <= 24:
            win = bet * 3
            response = f"üéâ 2-–π —Å–µ–∫—Ç–æ—Ä (13-24)! –í—ã–∏–≥—Ä—ã—à: {win}{CURRENCY}"
        else:
            response = f"‚ùå –ù–µ 2-–π —Å–µ–∫—Ç–æ—Ä. –í—ã–ø–∞–ª–æ: {result} ({sector})"

    elif choice.lower() in ["3 —Å–µ–∫—Ç–æ—Ä", "—Ç—Ä–µ—Ç–∏–π —Å–µ–∫—Ç–æ—Ä", "sector3"]:
        if 25 <= result <= 36:
            win = bet * 3
            response = f"üéâ 3-–π —Å–µ–∫—Ç–æ—Ä (25-36)! –í—ã–∏–≥—Ä—ã—à: {win}{CURRENCY}"
        else:
            response = f"‚ùå –ù–µ 3-–π —Å–µ–∫—Ç–æ—Ä. –í—ã–ø–∞–ª–æ: {result} ({sector})"

    else:
        await ctx.send("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –í–∞—Ä–∏–∞–Ω—Ç—ã: —á–∏—Å–ª–æ (0-36), —Ü–≤–µ—Ç (–∫—Ä–∞—Å–Ω–æ–µ/—á–µ—Ä–Ω–æ–µ), —Å–µ–∫—Ç–æ—Ä (1-–π/2-–π/3-–π)")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    user_balances[user_id] += win - bet if win > 0 else -bet
    save_balances()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    embed = discord.Embed(
        title=f"üé∞ –†—É–ª–µ—Ç–∫–∞: {result} {sector}",
        description=response,
        color=0x2F3136
    )
    embed.add_field(name="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", value=f"{user_balances[user_id]}{CURRENCY}")
    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞
@bot.command(name='–±–∞–ª–∞–Ω—Å', help='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å')
async def balance(ctx):
    user_id = str(ctx.author.id)
    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE
        save_balances()
    await ctx.send(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}{CURRENCY}")


# –ö–æ–º–∞–Ω–¥–∞ –∫–æ—Å—Ç–∏
@bot.command(name='–∫–æ—Å—Ç–∏', help='–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏: !–∫–æ—Å—Ç–∏ <—Å—Ç–∞–≤–∫–∞>')
async def dice(ctx, bet: int):
    user_id = str(ctx.author.id)

    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    if bet <= 0:
        await ctx.send("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    if user_balances[user_id] < bet:
        await ctx.send(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}{CURRENCY}"
        )
        return

    # –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
    player_roll = random.randint(1, 6) + random.randint(1, 6)
    bot_roll = random.randint(1, 6) + random.randint(1, 6)

    if player_roll > bot_roll:
        win = bet
        user_balances[user_id] += win
        await ctx.send(
            f"üé≤ –í—ã: {player_roll} | –ë–æ—Ç: {bot_roll}\nüéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win}{CURRENCY}!"
        )
    elif player_roll < bot_roll:
        user_balances[user_id] -= bet
        await ctx.send(
            f"üé≤ –í—ã: {player_roll} | –ë–æ—Ç: {bot_roll}\n‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet}{CURRENCY}!"
        )
    else:
        await ctx.send(
            f"üé≤ –í—ã: {player_roll} | –ë–æ—Ç: {bot_roll}\nü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
        )
        save_balances()


#–∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
@bot.command(name='—Å–µ—Ç–±–∞–ª–∞–Ω—Å')
async def set_balance(ctx, member: discord.Member, amount: int):
    if not is_admin(ctx):
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return

    user_balances[str(member.id)] = amount
    save_balances()

    await ctx.send(f"‚úÖ –ë–∞–ª–∞–Ω—Å {member.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount}{CURRENCY}")


#–ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ —Å –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
@bot.command(name='–ø–µ—Ä–µ–≤–æ–¥',
             aliases=['transfer'],
             help='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É: !–ø–µ—Ä–µ–≤–æ–¥ @–∏–≥—Ä–æ–∫ —Å—É–º–º–∞')
async def transfer_money(ctx, member: discord.Member, amount: int):
    try:
        sender_id = str(ctx.author.id)
        receiver_id = str(member.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if amount <= 0:
            await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return

        if sender_id == receiver_id:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ!")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if sender_id not in user_balances:
            user_balances[sender_id] = STARTING_BALANCE

        if receiver_id not in user_balances:
            user_balances[receiver_id] = STARTING_BALANCE

        if user_balances[sender_id] < amount:
            await ctx.send(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[sender_id]}{CURRENCY}"
            )
            return

        # –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
        user_balances[sender_id] -= amount
        user_balances[receiver_id] += amount
        save_balances()

        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = discord.Embed(
            title="‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
            description=f"{ctx.author.mention} ‚Üí {member.mention}",
            color=discord.Color.green())
        embed.add_field(name="–°—É–º–º–∞",
                        value=f"{amount}{CURRENCY}",
                        inline=False)
        embed.add_field(name="–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å",
                        value=f"{user_balances[sender_id]}{CURRENCY}",
                        inline=True)
        embed.add_field(name="–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                        value=f"{user_balances[receiver_id]}{CURRENCY}",
                        inline=True)

        await ctx.send(embed=embed)

    except Exception as e:
        error_embed = discord.Embed(title="‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
                                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                                    color=discord.Color.red())
        await ctx.send(embed=error_embed)
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")


# –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@bot.command(name='—Ä–µ—Å—Ç–∞—Ä—Ç',
             aliases=['restart'],
             help='–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù)')
@commands.has_permissions(administrator=True)
async def restart_bot(ctx):
    try:
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        save_balances()
        embed = discord.Embed(
            title="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞",
            description="–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...",
            color=discord.Color.orange())
        await ctx.send(embed=embed)
        await asyncio.sleep(1)

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        log_channel = bot.get_channel(
            1400538179097985209)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        if log_channel:
            await log_channel.send(
                f"üîß –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {ctx.author.mention}")

        # 3. –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        with open("restart_time.txt", "w") as f:
            f.write(str(ctx.message.created_at))

        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
        for i in range(3, 0, -1):
            await ctx.send(f"‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ {i}...")
            await asyncio.sleep(1)

        # 5. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
        python = sys.executable
        os.execl(python, python, *sys.argv)

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.event
async def on_ready():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    if os.path.exists("restart_time.txt"):
        with open("restart_time.txt", "r") as f:
            restart_time = f.read()
        os.remove("restart_time.txt")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        channel = bot.get_channel(
            1400538179097985209)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if channel:
            embed = discord.Embed(
                title="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                description=f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {restart_time}",
                color=discord.Color.green())
            embed.set_footer(text=f"–í–µ—Ä—Å–∏—è {discord.__version__}")
            await channel.send(embed=embed)


#–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–≤–Ω–µ–º
@bot.command(name='—É—Ä–æ–≤–µ–Ω—å',
             aliases=['level', 'lvl'],
             help='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å')
async def show_level(ctx, member: discord.Member = None):
    target = member or ctx.author
    user_id = str(target.id)

    if user_id not in user_levels:
        await ctx.send(f"{target.mention} –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —É—Ä–æ–≤–Ω—è")
        return

    data = user_levels[user_id]
    embed = discord.Embed(title=f"üìä –£—Ä–æ–≤–µ–Ω—å {target.display_name}",
                          color=discord.Color.blurple())
    embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=data["level"], inline=True)
    embed.add_field(name="–û–ø—ã—Ç",
                    value=f"{data['xp']}/{data['level'] * LEVEL_UP_XP}",
                    inline=True)
    embed.add_field(name="–ì–æ–ª–æ—Å–æ–≤–æ–π –æ–Ω–ª–∞–π–Ω",
                    value=f"{data['voice_minutes']} –º–∏–Ω.",
                    inline=True)
    embed.set_thumbnail(url=target.avatar.url)

    await ctx.send(embed=embed)

#—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
@bot.command(name='—Å–µ—Ç—É—Ä–æ–≤–µ–Ω—å', aliases=['setlevel'])
async def set_level(ctx, member: discord.Member, level: int):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not is_admin(ctx):
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return

    if level < 1:
        await ctx.send("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
        return

    user_id = str(member.id)
    if user_id not in user_levels:
        user_levels[user_id] = {"xp": 0, "level": 1, "voice_minutes": 0}

    user_levels[user_id]["level"] = level
    user_levels[user_id]["xp"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—ã—Ç
    save_levels()

    embed = discord.Embed(
        title="‚úÖ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω",
        description=f"{member.mention} —Ç–µ–ø–µ—Ä—å {level} —É—Ä–æ–≤–µ–Ω—å",
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)

#–¥–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É
@bot.command(name='–≤—ã–¥–∞—Ç—å–æ–ø—ã—Ç',
             aliases=['addxp'],
             help='–í—ã–¥–∞—Ç—å –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ADMIN)')
@commands.check(is_admin)
async def give_xp(ctx, member: discord.Member, xp: int):
    user_id = str(member.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if xp <= 0:
        await ctx.send("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
        return

    if member.bot:
        await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –æ–ø—ã—Ç –±–æ—Ç–∞–º!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if user_id not in user_levels:
        user_levels[user_id] = {"xp": 0, "level": 1, "voice_minutes": 0}

    old_level = user_levels[user_id]["level"]
    user_levels[user_id]["xp"] += xp

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    new_level = user_levels[user_id]["level"]
    while user_levels[user_id]["xp"] >= new_level * LEVEL_UP_XP:
        new_level += 1

    level_changed = new_level > old_level
    if level_changed:
        user_levels[user_id]["level"] = new_level

    save_levels()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        dm_embed = discord.Embed(title="üéâ –í–∞–º –≤—ã–¥–∞–ª–∏ –æ–ø—ã—Ç!",
                                 color=discord.Color.gold())
        dm_embed.add_field(name="–°–µ—Ä–≤–µ—Ä", value=ctx.guild.name, inline=False)
        dm_embed.add_field(name="–í—ã–¥–∞–Ω–æ –æ–ø—ã—Ç–∞", value=str(xp), inline=True)
        dm_embed.add_field(
            name="–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç",
            value=f"{user_levels[user_id]['xp']}/{new_level * LEVEL_UP_XP}",
            inline=True)

        if level_changed:
            dm_embed.add_field(
                name="**–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!**",
                value=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!",
                inline=False)
            dm_embed.color = discord.Color.green()

        await member.send(embed=dm_embed)
    except discord.Forbidden:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name}")

    # –û—Ç—á–µ—Ç –≤ —á–∞—Ç
    report_embed = discord.Embed(title="‚úÖ –û–ø—ã—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω",
                                 color=discord.Color.blurple())
    report_embed.add_field(name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                           value=ctx.author.mention,
                           inline=True)
    report_embed.add_field(name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                           value=member.mention,
                           inline=True)
    report_embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞",
                           value=str(xp),
                           inline=False)

    if level_changed:
        report_embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω",
                               value=f"{old_level} ‚Üí {new_level}",
                               inline=False)
        report_embed.color = discord.Color.green()

    await ctx.send(embed=report_embed)


@give_xp.error
async def give_xp_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send(embed=discord.Embed(
            title="‚õî –û—à–∏–±–∫–∞",
            description="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –æ–ø—ã—Ç!",
            color=discord.Color.red()))
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(embed=discord.Embed(
            title="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å",
            description=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `{PREFIX}–≤—ã–¥–∞—Ç—å–æ–ø—ã—Ç @–∏–≥—Ä–æ–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`",
            color=discord.Color.orange()))
    else:
        await ctx.send(embed=discord.Embed(title="‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                                           description=str(error),
                                           color=discord.Color.red()))


#—Å–æ–æ–±—à–µ–Ω–∏—è –≤ –ª—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
@bot.command(name='–ª—Å', aliases=['dm'])
@commands.has_permissions(administrator=True)
async def send_dm(ctx, member: discord.Member, *, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –õ–° —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if any(bad_word in message.lower()
               for bad_word in ["http://", "https://", "discord.gg/"]):
            await ctx.send("‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!", delete_after=5)
            return

        # –°–æ–∑–¥–∞—ë–º View —Å –∫–Ω–æ–ø–∫–æ–π
        class ResponseView(discord.ui.View):

            def __init__(self):
                super().__init__(timeout=None)

            @discord.ui.button(label="–û—Ç–≤–µ—Ç–∏—Ç—å",
                               style=discord.ButtonStyle.green,
                               emoji="‚úâÔ∏è")
            async def callback(self, interaction: discord.Interaction,
                               button: discord.ui.Button):
                try:
                    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
                    await interaction.response.send_message(
                        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (—É –≤–∞—Å 5 –º–∏–Ω—É—Ç):", ephemeral=True)

                    # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –≤ –õ–°
                    def check(m):
                        return m.author == interaction.user and isinstance(
                            m.channel, discord.DMChannel)

                    answer = await bot.wait_for('message',
                                                check=check,
                                                timeout=300)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
                    await ctx.author.send(
                        f"**üì© –û—Ç–≤–µ—Ç –æ—Ç {interaction.user.mention}:**\n"
                        f"{answer.content}")

                    await interaction.followup.send("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                                                    ephemeral=True)

                except asyncio.TimeoutError:
                    await interaction.followup.send("‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ!",
                                                    ephemeral=True)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        embed = discord.Embed(title=f"üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {ctx.guild.name}",
                              description=message,
                              color=discord.Color.blue())
        await member.send(embed=embed, view=ResponseView())
        await ctx.send(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {member.mention}",
                       delete_after=5)

    except discord.Forbidden:
        await ctx.send("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!",
                       delete_after=5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã !–ª–∏—á–∫–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ —Å–≤–∞–¥—å–±—ã
@bot.command(name='–∂–µ–Ω–∏—Ç—å—Å—è', aliases=['marry'])
async def marry(ctx, partner: discord.Member):
    author_id = str(ctx.author.id)
    partner_id = str(partner.id)

    if author_id == partner_id:
        await ctx.send("‚ùå –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ!")
        return

    if partner.bot:
        await ctx.send("‚ùå –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –±—Ä–∞–∫!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–∞–∫–æ–≤
    for marriage in marriages.values():
        if author_id in marriage["partners"] or partner_id in marriage[
                "partners"]:
            await ctx.send("‚õî –û–¥–∏–Ω –∏–∑ –≤–∞—Å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!")
            return

    # –°–æ–∑–¥–∞–µ–º View –¥–ª—è –∫–Ω–æ–ø–æ–∫
    class MarriageView(discord.ui.View):

        def __init__(self):
            super().__init__(timeout=60.0)

        @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å",
                           style=discord.ButtonStyle.success,
                           emoji="üíç")
        async def accept(self, interaction: discord.Interaction,
                         button: discord.ui.Button):
            if interaction.user.id != partner.id:
                await interaction.response.send_message(
                    "‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
                return

            marriage_id = f"{min(author_id, partner_id)}_{max(author_id, partner_id)}"
            marriages[marriage_id] = {
                "partners": [author_id, partner_id],
                "date": datetime.now().isoformat(),
                "wallet": 0
            }
            save_marriages()

            embed = discord.Embed(
                title="üíç –ë—Ä–∞–∫ –∑–∞–∫–ª—é—á–µ–Ω!",
                description=f"{ctx.author.mention} ‚ù§Ô∏è {partner.mention}",
                color=discord.Color.pink())
            embed.add_field(name="–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã",
                            value=datetime.now().strftime("%d.%m.%Y %H:%M"))
            await interaction.response.edit_message(embed=embed, view=None)
            self.stop()

        @discord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                           style=discord.ButtonStyle.danger,
                           emoji="‚ùå")
        async def decline(self, interaction: discord.Interaction,
                          button: discord.ui.Button):
            if interaction.user.id != partner.id:
                await interaction.response.send_message(
                    "‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!", ephemeral=True)
                return
            await interaction.response.edit_message(
                content=f"{partner.mention} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üò¢",
                view=None)
            self.stop()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    embed = discord.Embed(
        title="üíå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞",
        description=
        f"{partner.mention}, {ctx.author.mention} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫!",
        color=discord.Color.gold())
    await ctx.send(embed=embed, view=MarriageView())


# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–≤–æ–¥–∞
@bot.command(name='—Ä–∞–∑–≤–æ–¥', aliases=['divorce'])
async def divorce(ctx):
    author_id = str(ctx.author.id)

    # –ü–æ–∏—Å–∫ –±—Ä–∞–∫–∞
    marriage = None
    for m in marriages.values():
        if author_id in m["partners"]:
            marriage = m
            break

    if not marriage:
        await ctx.send("‚ùå –í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    partner_id = next(p for p in marriage["partners"] if p != author_id)
    partner = await bot.fetch_user(int(partner_id))

    # –î–µ–ª–µ–∂ –∏–º—É—â–µ—Å—Ç–≤–∞
    wallet = marriage["wallet"]
    half = wallet // 2

    # –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞
    marriage_id = f"{min(marriage['partners'])}_{max(marriage['partners'])}"
    del marriages[marriage_id]
    save_marriages(marriages)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    embed = discord.Embed(
        title="üíî –ë—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç",
        description=
        f"{ctx.author.mention} –∏ {partner.mention} –±–æ–ª—å—à–µ –Ω–µ –≤–º–µ—Å—Ç–µ",
        color=discord.Color.dark_grey())
    if wallet > 0:
        embed.add_field(name="–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞",
                        value=f"–ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç –ø–æ {half} üí∞")
    await ctx.send(embed=embed)


# –ü–æ–∏—Å–∫ –±—Ä–∞–∫–∞
@bot.command(name='–±—Ä–∞–∫', aliases=['marriage'])
async def marriage_info(ctx, user: discord.Member = None):
    target = user or ctx.author
    target_id = str(target.id)

    # –ü–æ–∏—Å–∫ –±—Ä–∞–∫–∞
    marriage = None
    for m in marriages.values():
        if target_id in m["partners"]:
            marriage = m
            break

    if not marriage:
        await ctx.send(f"‚ùå {target.mention} –Ω–µ –≤ –±—Ä–∞–∫–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    partner_id = next(p for p in marriage["partners"] if p != target_id)
    partner = await bot.fetch_user(int(partner_id))
    date = datetime.fromisoformat(marriage["date"]).strftime("%d.%m.%Y")

    # –°–æ–∑–¥–∞–µ–º Embed
    embed = discord.Embed(title=f"üíç –ë—Ä–∞—á–Ω—ã–π —Å–æ—é–∑", color=discord.Color.pink())
    embed.add_field(name="–ü–∞—Ä—Ç–Ω–µ—Ä—ã",
                    value=f"{target.mention} ‚ù§Ô∏è {partner.mention}",
                    inline=False)
    embed.add_field(name="–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã", value=date, inline=True)
    embed.add_field(name="–û–±—â–∏–π –±—é–¥–∂–µ—Ç",
                    value=f"{marriage['wallet']} üí∞",
                    inline=True)

    await ctx.send(embed=embed)


# –°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç
@bot.command(name='—Å–µ–º–µ–π–Ω—ã–π–±—é–¥–∂–µ—Ç', aliases=['familywallet'])
async def family_wallet(ctx, action: str = None, amount: int = None):
    author_id = str(ctx.author.id)

    # –ü–æ–∏—Å–∫ –±—Ä–∞–∫–∞
    marriage = None
    for m in marriages.values():
        if author_id in m["partners"]:
            marriage = m
            break

    if not marriage:
        await ctx.send("‚ùå –í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    partner_id = next(p for p in marriage["partners"] if p != author_id)
    partner = await bot.fetch_user(int(partner_id))

    if not action:
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞
        await ctx.send(f"üí∞ –û–±—â–∏–π –±—é–¥–∂–µ—Ç: {marriage['wallet']} –º–æ–Ω–µ—Ç")
        return

    if action == "–ø–æ–ª–æ–∂–∏—Ç—å":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_balances.get(author_id, 0) < amount:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        # –ü–µ—Ä–µ–≤–æ–¥
        user_balances[author_id] -= amount
        marriage["wallet"] += amount
        save_balances()
        save_marriages(marriages)

        await ctx.send(f"‚úÖ {amount} –º–æ–Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç!")

    elif action == "—Å–Ω—è—Ç—å":
        if marriage["wallet"] < amount:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±—é–¥–∂–µ—Ç–µ!")
            return

        marriage["wallet"] -= amount
        user_balances[author_id] += amount
        save_balances()
        save_marriages(marriages)

        await ctx.send(f"‚úÖ {amount} –º–æ–Ω–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤–∞–º!")


@bot.event
async def on_ready():
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user.name} (ID: {bot.user.id})")
    print("------")
    business_income.start()


@bot.event
async def on_message(message):
    if message.author.bot:
        return

    logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author}: {message.content[:20]}...")
    await bot.process_commands(message)

#–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
@bot.command(name='–±–æ–Ω—É—Å', aliases=['daily'])
@commands.cooldown(1, 86400, commands.BucketType.user)  # 24 —á–∞—Å–∞
async def daily_bonus(ctx):
    user_id = str(ctx.author.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    if user_id not in user_levels:
        user_levels[user_id] = {"level": 1, "xp": 0, "voice_minutes": 0, "last_daily": None, "streak": 0}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    now = datetime.now()
    last_claim = datetime.fromisoformat(user_levels[user_id].get("last_daily", "2000-01-01"))

    # –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å
    if (now - last_claim) > timedelta(days=1):
        user_levels[user_id]["streak"] = 0

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
    bonus = random.randint(DAILY_BONUS["min"], DAILY_BONUS["max"])
    streak = user_levels[user_id]["streak"] + 1

    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
    extra = 0
    for days, reward in DAILY_BONUS["streak_bonus"].items():
        if streak >= days and streak % days == 0:
            extra += reward

    total = bonus + extra
    user_balances[user_id] += total
    user_levels[user_id]["streak"] = streak
    user_levels[user_id]["last_daily"] = now.isoformat()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    save_balances()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç BALANCES_FILE
    save_levels()    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LEVELS_FILE

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
    embed = discord.Embed(
        title="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
        color=discord.Color.gold()
    )
    embed.add_field(name="–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", value=f"{bonus} {CURRENCY}", inline=True)
    if extra > 0:
        embed.add_field(name="–ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é", value=f"+{extra} {CURRENCY}", inline=True)
    embed.add_field(name="–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è", value=f"{streak} –¥–Ω–µ–π", inline=False)
    embed.add_field(name="–û–±—â–∏–π –±–∞–ª–∞–Ω—Å", value=f"{user_balances[user_id]} {CURRENCY}", inline=False)
    embed.set_footer(text="–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!")

    await ctx.send(embed=embed)
@daily_bonus.error
async def daily_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        remaining = str(timedelta(seconds=int(error.retry_after)))
        embed = discord.Embed(
            title="‚è≥ –£–∂–µ –ø–æ–ª—É—á–∞–ª —Å–µ–≥–æ–¥–Ω—è!",
            description=f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {remaining}",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)
    else:
        await ctx.send(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(error)}")

# –†–∞–±–æ—Ç—ã
@bot.command(name='—Ä–∞–±–æ—Ç–∞', aliases=['work'])
@commands.cooldown(1, 43200, commands.BucketType.user)  # 12 —á–∞—Å–æ–≤
async def work(ctx):
    user_id = str(ctx.author.id)
    jobs = [
        ("—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º", 800, 1500),
        ("—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–º", 500, 1000),
        ("–¥–∏–∑–∞–π–Ω–µ—Ä–æ–º", 600, 1200),
        ("–≤–æ–¥–∏—Ç–µ–ª–µ–º", 400, 800),
        ("–ø—Ä–æ–¥–∞–≤—Ü–æ–º", 300, 700)
    ]

    job = random.choice(jobs)
    earnings = random.randint(job[1], job[2])

    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    user_balances[user_id] += earnings
    save_balances()

    embed = discord.Embed(
        title="üíº –†–∞–±–æ—Ç–∞",
        description=f"–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ {job[0]} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings}{CURRENCY}!",
        color=discord.Color.green()
    )
    embed.set_footer(text="–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤")
    await ctx.send(embed=embed)

# –†–∞–±–æ—Ç–∞: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
@bot.command(name='–∫—Ä–∏–ø—Ç–∞', aliases=['crypto'])
async def crypto(ctx, amount: int):
    user_id = str(ctx.author.id)

    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return

    if user_balances[user_id] < amount:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    # –®–∞–Ω—Å 60% –Ω–∞ –ø—Ä–∏–±—ã–ª—å, 40% –Ω–∞ —É–±—ã—Ç–æ–∫
    if random.random() < 0.6:
        profit = round(amount * random.uniform(0.1, 0.5))
        user_balances[user_id] += profit
        result = f"‚úÖ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {profit}{CURRENCY} –Ω–∞ –∫—Ä–∏–ø—Ç–µ!"
    else:
        loss = round(amount * random.uniform(0.1, 0.3))
        user_balances[user_id] -= loss
        result = f"‚ùå –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {loss}{CURRENCY} –Ω–∞ –∫—Ä–∏–ø—Ç–µ..."

    save_balances()

    embed = discord.Embed(
        title="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
        description=result,
        color=discord.Color.orange()
    )
    embed.add_field(name="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", value=f"{user_balances[user_id]}{CURRENCY}")
    await ctx.send(embed=embed)

#–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞
@bot.command(name='–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ', aliases=['rob'])
@commands.cooldown(1, 86400, commands.BucketType.user)  # 24 —á–∞—Å–∞
async def rob_bank(ctx):
    user_id = str(ctx.author.id)

    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    # 45% —É—Å–ø–µ—Ö–∞, 55% –ø—Ä–æ–≤–∞–ª–∞
    if random.random() < 0.45:
        loot = random.randint(1000, 5000)
        user_balances[user_id] += loot
        result = f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ –±–∞–Ω–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏ {loot}{CURRENCY}!"
        color = discord.Color.green()
    else:
        fine = random.randint(500, 2000)
        user_balances[user_id] = max(0, user_balances[user_id] - fine)
        result = f"üöî –í–∞—Å –ø–æ–π–º–∞–ª–∏! –®—Ç—Ä–∞—Ñ: {fine}{CURRENCY}"
        color = discord.Color.red()

    save_balances()

    embed = discord.Embed(
        title="üè¶ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞",
        description=result,
        color=color
    )
    embed.set_footer(text="–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞")
    await ctx.send(embed=embed)

#–†—ã–±–∞–ª–∫–∞
@bot.command(name='—Ä—ã–±–∞–ª–∫–∞', aliases=['fish'])
@commands.cooldown(1, 14400, commands.BucketType.user)  # 4 —á–∞—Å–∞
async def fishing(ctx):
    user_id = str(ctx.author.id)
    fish_types = [
        ("–∫–∞—Ä–∞—Å—è", 50, 100),
        ("–æ–∫—É–Ω—è", 100, 200),
        ("—â—É–∫—É", 200, 400),
        ("–ª–µ—â–∞", 150, 300),
        ("—Å–æ–º", 300, 600),
        ("—Å—Ç–∞—Ä—É—é –ø–æ–∫—Ä—ã—à–∫—É", 0, 0)
    ]

    fish = random.choice(fish_types)

    if fish[0] == "—Å—Ç–∞—Ä—É—é –ø–æ–∫—Ä—ã—à–∫—É":
        earnings = 0
        result = "–í—ã –ø–æ–π–º–∞–ª–∏ —Å—Ç–∞—Ä—É—é –ø–æ–∫—Ä—ã—à–∫—É... –ù–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏"
    else:
        earnings = random.randint(fish[1], fish[2])
        result = f"–í—ã –ø–æ–π–º–∞–ª–∏ {fish[0]} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings}{CURRENCY}!"

    if user_id not in user_balances:
        user_balances[user_id] = STARTING_BALANCE

    user_balances[user_id] += earnings
    save_balances()

    embed = discord.Embed(
        title="üé£ –†—ã–±–∞–ª–∫–∞",
        description=result,
        color=discord.Color.blue()
    )
    embed.set_footer(text="–°–ª–µ–¥—É—é—â–∞—è —Ä—ã–±–∞–ª–∫–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞")
    await ctx.send(embed=embed)

#–†–∞–±–æ—Ç—ã "(HELP)"
@bot.command(name='—Ä–∞–±–æ—Ç—ã', aliases=['jobs'])
async def jobs_list(ctx):
    embed = discord.Embed(
        title="üíº –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
        description=f"–í—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è {CURRENCY}",
        color=discord.Color.gold()
    )

    jobs_info = [
        {
            "name": "!—Ä–∞–±–æ—Ç–∞",
            "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º",
            "income": "500-1500",
            "cooldown": "12 —á–∞—Å–æ–≤",
            "risk": "–ù–µ—Ç —Ä–∏—Å–∫–∞"
        },
        {
            "name": "!–∫—Ä–∏–ø—Ç–∞ [—Å—É–º–º–∞]",
            "description": "–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
            "income": "+10-50% –∏–ª–∏ -10-30% –æ—Ç —Å—É–º–º—ã",
            "cooldown": "–ù–µ—Ç",
            "risk": "–í—ã—Å–æ–∫–∏–π"
        },
        {
            "name": "!–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
            "description": "–ü–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–∞",
            "income": "1000-5000 –∏–ª–∏ —à—Ç—Ä–∞—Ñ 500-2000",
            "cooldown": "24 —á–∞—Å–∞",
            "risk": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π"
        },
        {
            "name": "!—Ä—ã–±–∞–ª–∫–∞",
            "description": "–°–ø–æ–∫–æ–π–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —É—Å–ø–µ—Ö–æ–º",
            "income": "0-600 (–º–æ–∂–Ω–æ –ø–æ–π–º–∞—Ç—å –ø–æ–∫—Ä—ã—à–∫—É)",
            "cooldown": "4 —á–∞—Å–∞",
            "risk": "–ù–∏–∑–∫–∏–π"
        },
        {
            "name": "!–±–æ–Ω—É—Å",
            "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ (—á–µ–º –¥–æ–ª—å—à–µ —Å–µ—Ä–∏—è - —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å)",
            "income": "550-1550 + –±–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏—é",
            "cooldown": "24 —á–∞—Å–∞",
            "risk": "–ù–µ—Ç —Ä–∏—Å–∫–∞"
        }
    ]

    for job in jobs_info:
        embed.add_field(
            name=f"**{job['name']}**",
            value=(
                f"{job['description']}\n"
                f"üíµ –î–æ—Ö–æ–¥: {job['income']}\n"
                f"‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {job['cooldown']}\n"
                f"‚ö†Ô∏è –†–∏—Å–∫: {job['risk']}"
            ),
            inline=False
        )

    embed.set_footer(text=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {PREFIX}–ø–æ–º–æ—â—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ –∫–æ–º–∞–Ω–¥–∞—Ö")
    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ —Å–µ–∫–∞—Å
@bot.command(name='—Å–µ–∫—Å', aliases=['kiss'])
async def kiss(ctx, member: discord.Member):
    kisses = [
        f"{ctx.author.mention} –Ω–µ–∂–Ω–æ –µ–±–µ—Ç {member.mention} üíã",
        f"{ctx.author.mention} —Å—Ç—Ä–∞—Å—Ç–Ω–æ –µ–±–µ—Ç {member.mention} üòò",
        f"{ctx.author.mention} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ü–µ–ª—É–π –≤ –≤–∏–¥–µ —Å–ø–µ—Ä–º—ã {member.mention} üí®üíã",
        f"{ctx.author.mention} —Ü–µ–ª—É–µ—Ç {member.mention} –≤ –ø–æ–ø–∫—É üòä"
    ]

    embed = discord.Embed(
        description=random.choice(kisses),
        color=discord.Color.pink()
    )
    await ctx.send(embed=embed)

# –î–∞ –∏–ª–∏ –Ω–µ—Ç
@bot.command(name='–¥–∞–Ω–µ—Ç', aliases=['–¥–∞–∏–ª–∏–Ω–µ—Ç', 'yesno', 'yn'])
async def yesno(ctx, *, question: str = None):
    """–°—Ç—Ä–æ–≥–æ –î–∞ –∏–ª–∏ –ù–µ—Ç"""
    answer = random.choice(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"])  # 50/50

    embed = discord.Embed(color=0x2F3136)  # Discord-—Å–µ—Ä—ã–π

    if question:
        embed.add_field(name="–í–æ–ø—Ä–æ—Å", value=question, inline=False)

    embed.add_field(name="–û—Ç–≤–µ—Ç", value=answer, inline=False)

    await ctx.send(embed=embed)

@bot.command(name='–¥–æ–±–∞–≤–∏—Ç—å–∞–¥–º–∏–Ω–∞')
@commands.has_permissions(administrator=True)
async def add_admin(ctx, user: discord.User):
    with open('config.json', 'r+') as f:
        config = json.load(f)
        if str(user.id) not in config['admin_ids']:
            config['admin_ids'].append(str(user.id))
            f.seek(0)
            json.dump(config, f, indent=4)
            await ctx.send(f"‚úÖ {user.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
        else:
            await ctx.send("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞")

# –°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å–æ–≤
@bot.command(name='–±–∏–∑–Ω–µ—Å')
async def business_info(ctx):
    user_id = str(ctx.author.id)

    if user_id not in user_businesses:
        embed = discord.Embed(
            title="üõí –°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å–æ–≤",
            description=f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞! –ö—É–ø–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `{PREFIX}–∫—É–ø–∏—Ç—å–±–∏–∑–Ω–µ—Å`",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        return

    biz = user_businesses[user_id]
    biz_type = BUSINESS_TYPES[biz["type"]]

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    balance = biz.get("balance", 0)
    capacity = biz_type["capacity"]
    progress = min(balance / capacity * 100, 100)
    progress_bar = f"[{'‚ñà' * int(progress/10)}{'‚ñë' * (10 - int(progress/10))}] {progress:.1f}%"

    embed = discord.Embed(
        title=f"{biz_type['emoji']} {biz['name']}",
        description=f"**–¢–∏–ø:** {biz_type['name']} (–£—Ä. {biz['level']})",
        color=discord.Color.gold()
    )

    embed.add_field(
        name="üí∞ –ö–∞—Å—Å–∞ –±–∏–∑–Ω–µ—Å–∞",
        value=f"{balance}/{capacity}{CURRENCY}",
        inline=False
    )

    embed.add_field(
        name="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å",
        value=progress_bar,
        inline=False
    )

    embed.add_field(
        name="üíµ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
        value=f"{biz_type['income'][0]}-{biz_type['income'][1]}{CURRENCY} –≤ —á–∞—Å",
        inline=True
    )

    if biz["type"] < 3:
        next_type = BUSINESS_TYPES[biz["type"] + 1]
        embed.add_field(
            name="‚ö° –£–ª—É—á—à–µ–Ω–∏–µ",
            value=f"–î–æ {next_type['name']} –∑–∞ {next_type['upgrade_cost']}{CURRENCY}",
            inline=True
        )

    embed.set_footer(text=f"–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏: {PREFIX}–∑–∞–±—Ä–∞—Ç—å–¥–µ–Ω—å–≥–∏ [—Å—É–º–º–∞|all]")

    await ctx.send(embed=embed)

@bot.command(name='–∫—É–ø–∏—Ç—å–±–∏–∑–Ω–µ—Å')
async def buy_business(ctx):
    user_id = str(ctx.author.id)
    cost = 3000

    if user_id in user_businesses:
        await ctx.send("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å!")
        return

    if user_balances.get(user_id, 0) < cost:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {cost}{CURRENCY}")
        return

    user_balances[user_id] -= cost
    user_businesses[user_id] = {
        "type": 1,
        "level": 1,
        "name": f"–ö–æ—Ñ–µ–π–Ω—è {ctx.author.name}",
        "balance": 0,  # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        "last_income": datetime.now().isoformat()
    }

    save_balances()
    save_businesses()

    await ctx.send(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –∫–æ—Ñ–µ–π–Ω—é! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: `{PREFIX}–±–∏–∑–Ω–µ—Å`")
    
@bot.command(name='—É–ª—É—á—à–∏—Ç—å–±–∏–∑–Ω–µ—Å')
async def upgrade_business(ctx):
    """–£–ª—É—á—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    user_id = str(ctx.author.id)

    if user_id not in user_businesses:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!")
        return

    biz = user_businesses[user_id]
    if biz["type"] >= 3:
        await ctx.send("‚ÑπÔ∏è –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–∏–∑–Ω–µ—Å–∞!")
        return

    next_type = biz["type"] + 1
    cost = BUSINESS_TYPES[next_type]["upgrade_cost"]

    if user_balances.get(user_id, 0) < cost:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {cost}{CURRENCY}")
        return

    user_balances[user_id] -= cost
    biz["type"] = next_type
    biz["level"] += 1

    save_balances()
    save_businesses()

    await ctx.send(f"üéâ –í—ã —É–ª—É—á—à–∏–ª–∏ –±–∏–∑–Ω–µ—Å –¥–æ {BUSINESS_TYPES[next_type]['name']}!")

@bot.command(name='–Ω–∞–∑–≤–∞—Ç—å–±–∏–∑–Ω–µ—Å')
async def rename_business(ctx, *, name: str):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
    user_id = str(ctx.author.id)

    if user_id not in user_businesses:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!")
        return

    if len(name) > 32:
        await ctx.send("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª–∞)")
        return

    user_businesses[user_id]["name"] = name
    save_businesses()

    await ctx.send(f"‚úÖ –ë–∏–∑–Ω–µ—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ ¬´{name}¬ª")

@tasks.loop(minutes=60)
async def business_income():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–π —á–∞—Å"""
    for user_id, biz in user_businesses.items():
        biz_type = BUSINESS_TYPES[biz["type"]]
        income = random.randint(biz_type["income"][0], biz_type["income"][1])
        user_balances[user_id] = user_balances.get(user_id, 0) + income
    save_balances()

#—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∏–∑–Ω–µ—Å–∞
@bot.command(name='–∑–∞–±—Ä–∞—Ç—å–¥–µ–Ω—å–≥–∏', aliases=['—Å–Ω—è—Ç—å–¥–µ–Ω—å–≥–∏', 'withdraw'])
async def withdraw_money(ctx, amount: str = "all"):
    user_id = str(ctx.author.id)

    if user_id not in user_businesses:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞!")
        return

    biz = user_businesses[user_id]
    biz_type = BUSINESS_TYPES[biz["type"]]

    max_amount = biz.get("balance", 0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ "all" –∏–ª–∏ —á–∏—Å–ª–∞
    if amount.lower() == "all":
        amount = max_amount
    else:
        try:
            amount = int(amount)
            if amount <= 0:
                await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
        except ValueError:
            await ctx.send("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'all'!")
            return

    if max_amount == 0:
        await ctx.send("‚ÑπÔ∏è –ù–∞ –±–∞–ª–∞–Ω—Å–µ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç –¥–µ–Ω–µ–≥!")
        return

    if amount > max_amount:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: {max_amount}{CURRENCY}")
        return

    # –°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥
    biz["balance"] -= amount
    user_balances[user_id] = user_balances.get(user_id, 0) + amount

    save_businesses()
    save_balances()

    embed = discord.Embed(
        title=f"üí∞ –£—Å–ø–µ—à–Ω–æ–µ —Å–Ω—è—Ç–∏–µ",
        description=f"–°–Ω—è—Ç–æ {amount}{CURRENCY} —Å –±–∏–∑–Ω–µ—Å–∞",
        color=discord.Color.green()
    )
    embed.add_field(name="–ë–∞–ª–∞–Ω—Å –±–∏–∑–Ω–µ—Å–∞", value=f"{biz['balance']}/{biz_type['capacity']}{CURRENCY}", inline=True)
    embed.add_field(name="–í–∞—à –±–∞–ª–∞–Ω—Å", value=f"{user_balances[user_id]}{CURRENCY}", inline=True)

    await ctx.send(embed=embed)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{PREFIX}–ø–æ–º–æ—â—å`")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{PREFIX}–ø–æ–º–æ—â—å`")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
    else:
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.event
async def on_command_error(ctx, error):
    error_msg = f"–ö–æ–º–∞–Ω–¥–∞: {ctx.command}, –û—à–∏–±–∫–∞: {str(error)}"
    error_logger.error(error_msg, exc_info=True)

    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", delete_after=5)
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", delete_after=5)
    else:
        await ctx.send(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(error)}", delete_after=10)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.run(TOKEN)


@bot.event
async def on_disconnect():
    """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏"""
    save_balances()


if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    finally:
        save_balances()  # –°–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –∫—Ä–∞—à–µ
